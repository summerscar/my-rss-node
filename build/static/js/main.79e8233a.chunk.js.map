{"version":3,"sources":["App.js","components/index/index.js","components/video/index.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","Footer","App","props","location","useLocation","React","useEffect","console","log","className","pathname","to","type","style","fontSize","color","padding","children","textAlign","useState","videos","setVideos","axios","get","then","res","data","items","map","item","index","url","key","src","width","controls","preload","poster","title","state","Date","pubDate","toLocaleString","Video","autoPlay","contentSnippet","Boolean","window","hostname","match","ReactDOM","render","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iNAIQA,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OA6BVC,MA3Bf,SAAaC,GACX,IAAIC,EAAWC,cAKf,OAJAC,IAAMC,WAAU,WACfC,QAAQC,IAAIL,KACV,CAACA,IAGF,kBAAC,IAAD,CAAQM,UAAU,UAChB,kBAACZ,EAAD,KACyB,MAAtBM,EAASO,SACR,kBAAC,IAAD,CACEC,GAAI,CAACD,SAAU,MAEd,kBAAC,IAAD,CAAME,KAAK,OAAOC,MAAO,CAACC,SAAU,OAAQC,MAAO,YAElD,yBAAKF,MAAO,CAACE,MAAO,UAApB,aAIR,kBAAChB,EAAD,CAASc,MAAO,CAAEG,QAAS,WACxBd,EAAMe,UAET,kBAACjB,EAAD,CAAQa,MAAO,CAAEK,UAAW,WAA5B,4C,yBCoBSjB,MA5Cf,WAAgB,IAAD,EACekB,qBADf,mBACNC,EADM,KACEC,EADF,KAUb,OAPAf,qBAAU,WACRgB,IAAMC,IAAI,0BAA0BC,MAAK,SAAAC,GACvClB,QAAQC,IAAIiB,EAAIC,MAChBL,EAAUI,EAAIC,KAAKC,YAEpB,IAGD,yBAAKlB,UAAU,eACZW,GAAUA,EAAOQ,KAAI,SAACC,EAAMC,GAE3B,IAAIC,EAAM,kBAEGF,EAAKE,KAElB,OAAQ,yBAAKC,IAAKF,EAAOrB,UAAU,aACjC,6BACE,2BACEwB,IAAKF,EACLG,MAAM,OACNC,UAAU,EACVC,QAAmB,IAAVN,EAAc,OAAS,OAChCO,OAAQ,kBAGZ,kBAAC,IAAD,CACE5B,UAAU,OACVE,GAAI,CACFD,SAAU,UAAYmB,EAAKS,MAC3BC,MAAO,CAAEb,KAAMG,KAGhBA,EAAKS,MACN,6BAAM,IAAIE,KAAKX,EAAKY,SAASC,yBCX1BC,MAxBf,SAAezC,GACb,IACIwB,EADWtB,cACKmC,MAAMb,KAEtBK,EAAM,kBAEGL,EAAKK,KAElB,OACE,oCACE,yBAAKtB,UAAU,aACb,6BACE,2BAAOwB,IAAKF,EAAKG,MAAM,OAAOC,UAAU,EAAMS,UAAU,KAE1D,yBAAKnC,UAAU,kBACb,6BAAMiB,EAAKY,OACX,6BAAM,IAAIE,KAAKd,EAAKe,SAASC,kBAC7B,6BAAMhB,EAAKmB,oBCVDC,QACW,cAA7BC,OAAO5C,SAAS6C,UAEe,UAA7BD,OAAO5C,SAAS6C,UAEhBD,OAAO5C,SAAS6C,SAASC,MACvB,2DCPNC,IAASC,OACT,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,iBACV,kBAAC,EAAD,UAIUC,SAASC,eAAe,SD4GpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,a","file":"static/js/main.79e8233a.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { Layout, Icon } from 'antd';\nimport {useLocation, Link} from 'react-router-dom'\nconst { Header, Content, Footer } = Layout;\n\nfunction App(props) {\n  let location = useLocation();\n  React.useEffect(() => {\n   console.log(location)\n  }, [location]);\n  \n  return (\n    <Layout className=\"layout\">\n      <Header>\n        {location.pathname !== '/' ? (\n          <Link\n            to={{pathname: '/'}}\n          >\n             <Icon type=\"left\" style={{fontSize: '20px', color: 'white'}}/>\n          </Link>\n          ) : <div style={{color: 'white'}}>ANN NEWS</div>\n        }\n        \n      </Header>\n      <Content style={{ padding: '0 50px' }}>\n        {props.children}\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Ant Design Â©2018 Created by Ant UED</Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React, {useState, useEffect} from 'react';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\n\nfunction App() {\n  const [videos, setVideos] = useState()\n\n  useEffect(() => {\n    axios.get('/api/youtube/ANNnewsCH').then(res => {\n      console.log(res.data)\n      setVideos(res.data.items)\n    })\n  }, [])\n\n  return (\n    <div className=\"homeWrapper\">\n      {videos && videos.map((item, index) => {\n\n        let url = process.env.NODE_ENV === 'development' ? \n          `http://localhost:3000/videos/${item.url}` : \n          `/videos/${item.url}`\n\n        return (<div key={index} className=\"videoItem\">\n          <div>\n            <video \n              src={url} \n              width=\"100%\" \n              controls={true} \n              preload={index === 0 ? 'auto' : 'none'}\n              poster={'/annnews.jpg'}\n            />\n          </div>\n          <Link \n            className=\"link\"\n            to={{\n              pathname: \"/video/\" + item.title,\n              state: { data: item }\n            }}\n          >\n            {item.title}\n            <div>{new Date(item.pubDate).toLocaleString()}</div>\n          </Link>\n        </div>\n      )})}\n    </div>\n  );\n}\n\nexport default App;\n","import React, {useState, useEffect} from 'react';\nimport {\n  useLocation\n} from \"react-router-dom\";\n\nfunction Video(props) {\n  let location = useLocation();\n  let data = location.state.data\n\n  let url = process.env.NODE_ENV === 'development' ? \n    `http://localhost:3000/videos/${data.url}` : \n    `/videos/${data.url}`\n    \n  return (\n    <>\n      <div className=\"videoItem\">\n        <div>\n          <video src={url} width=\"100%\" controls={true} autoPlay={true}/>\n        </div>\n        <div className=\"contentWrapper\">\n          <div>{data.title}</div>\n          <div>{new Date(data.pubDate).toLocaleString()}</div>\n          <div>{data.contentSnippet}</div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Video;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Index from './components/index';\nimport Video from './components/video';\n\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route, Link, Switch } from \"react-router-dom\";\n\n\nReactDOM.render(\n<BrowserRouter>\n  <App>\n    <Switch>\n      <Route exact path=\"/\">\n        <Index />\n      </Route>\n      <Route path=\"/video/:title\">\n        <Video />\n      </Route>\n    </Switch>\n  </App>\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}