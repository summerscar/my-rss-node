{"version":3,"sources":["components/index/index.js","components/video/index.js","components/header/index.js","App.js","serviceWorker.js","index.js"],"names":["App","props","videos","className","map","item","index","url","key","src","width","controls","preload","poster","to","pathname","title","state","data","style","fontSize","Date","pubdate","toLocaleString","tip","size","Video","useLocation","autoPlay","fontWeight","textAlign","paddingTop","contentsnippet","Header","Layout","NewHeader","location","React","useEffect","console","log","type","color","Content","Footer","useState","setVideos","axios","get","then","res","items","padding","exact","path","href","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3f47679d.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Spin } from 'antd';\n\nfunction App(props) {\n  const {videos} = props\n  return (\n    <div className=\"homeWrapper\">\n      {videos ? videos.map((item, index) => {\n\n        let url = `https://myrssvideo.s3.jp-tok.cloud-object-storage.appdomain.cloud/${item.url}`\n\n        return (<div key={index} className=\"videoItem\">\n          <div>\n            <video \n              src={url} \n              width=\"100%\" \n              controls={true} \n              preload={index === 0 ? 'auto' : 'none'}\n              poster={'/annnews.jpg'}\n            />\n          </div>\n          <Link \n            className=\"link\"\n            to={{\n              pathname: \"/video/\" + item.title,\n              state: { data: item }\n            }}\n          >\n            {item.title}\n            <div  style={{fontSize: '12px'}}>{new Date(item.pubdate).toLocaleString()}</div>\n          </Link>\n        </div>\n      )}) : <Spin tip=\"稍等一下哦\" size=\"large\"/>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport {\n  useLocation\n} from \"react-router-dom\";\n\nfunction Video(props) {\n  let location = useLocation();\n  let data = location.state.data\n\n  let url = `https://myrssvideo.s3.jp-tok.cloud-object-storage.appdomain.cloud/${data.url}`\n    \n  return (\n    <>\n      <div>\n        <div>\n          <video src={url} width=\"100%\" controls={true} autoPlay={true}/>\n        </div>\n        <div className=\"contentWrapper\">\n          <div style={{fontSize: '14px', fontWeight: 'bold'}}>{data.title}</div>\n          <div style={{fontSize: '12px', textAlign: 'right'}}>{new Date(data.pubdate).toLocaleString()}</div>\n          <div style={{paddingTop: '1rem'}}>{data.contentsnippet}</div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Video;\n","import { Link, useLocation } from \"react-router-dom\";\nimport React from 'react'\nimport { Layout, Icon } from 'antd';\nconst { Header } = Layout;\nconst NewHeader = () => {\n  let location = useLocation();\n  React.useEffect(() => {\n    console.log(location)\n  }, [location]);\n\n  return (\n    <Header>\n      {location.pathname !== '/' ? (\n        <Link\n          to={{ pathname: '/' }}\n        >\n          <Icon type=\"left\" style={{ fontSize: '20px', color: 'white' }} />\n        </Link>\n      ) : <div style={{ color: 'white' }}>ANN NEWS</div>\n      }\n    </Header>\n  )\n}\n\nexport default NewHeader\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Layout } from 'antd';\nimport Index from './components/index';\nimport Video from './components/video';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Header from './components/header'\nimport axios from 'axios';\nconst { Content, Footer } = Layout;\n\n\nfunction App() {\n  const [videos, setVideos] = useState()\n\n  useEffect(() => {\n    axios.get('/api/youtube/ANNnewsCH').then(res => {\n      console.log(res.data)\n      setVideos(res.data.items)\n    })\n  }, [])\n\n  return (\n    <BrowserRouter>\n      <Layout className=\"layout\">\n        <Header></Header>\n        <Content style={{ padding: '0 50px' }}>\n          <Switch>\n            <Route exact path=\"/\">\n              <Index videos={videos} />\n            </Route>\n            <Route path=\"/video/:title\">\n              <Video />\n            </Route>\n          </Switch>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>ANN News by <a href=\"https://github.com/summerscar/my-rss-node\">summerscar</a></Footer>\n      </Layout>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}